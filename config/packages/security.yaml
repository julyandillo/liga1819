security:
  encoders:
    App\Entity\User:
      algorithm: bcrypt

  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    entity_provider:
      entity:
        class: App\Entity\User
        property: username

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/login
      stateless: true
      anonymous: true
      form_login:
        check_path: /login
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
        require_previous_session: false

    register:
      pattern: ^/register
      stateless: true
      anonymous: true

    test:
      pattern:   ^/test
      stateless: true
      anonymous: false
      provider: entity_provider
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator

    guardarpartido:
      pattern:   ^/guardarpartido
      stateless: true
      anonymous: false
      provider: entity_provider
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator

    main:
      anonymous: true

      # activate different ways to authenticate

      # http_basic: true
      # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

      # form_login: true
      # https://symfony.com/doc/current/security/form_login_setup.html

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }
    - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/test, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/guardarpartido, roles: IS_AUTHENTICATED_FULLY }
